name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    permissions: # Permissions needed for OIDC token
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false

      # The OIDC steps below are an alternative to using the AZURE_STATIC_WEB_APPS_API_TOKEN.
      # If your Azure Static Web App's deployment source is configured for OIDC with GitHub Actions,
      # you might not need the azure_static_web_apps_api_token input in the deploy step.
      # However, the Azure/static-web-apps-deploy action also supports the deployment token directly.
      # The original error was about the build process, not authentication.

      # For simplicity and to address the original build error, we'll focus on that.
      # If OIDC is fully set up on the Azure side for this SWA, then azure_static_web_apps_api_token might be ignored or not needed.
      # But if it was originally set up with a deployment token, that secret is likely still expected or used as a fallback.

      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          # If OIDC is the primary auth method configured in Azure for this SWA,
          # the token below might not be strictly necessary, but it doesn't hurt to leave it
          # if the secret exists from the initial setup.
          # The action will prioritize OIDC if properly configured.
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_GREEN_BUSH_0B1688A00 }} # This is your deployment token secret
          
          action: "upload"
          
          ###### Repository/Build Configurations ######
          app_location: "/" # App source code path
          api_location: ""  # Api source code path - optional
          output_location: "/" # Built app content directory - optional
          
          skip_app_build: 'true' # <--- THIS IS THE KEY FIX for plain HTML
          
          # The github_id_token input is not a standard input for Azure/static-web-apps-deploy@v1.
          # OIDC integration is typically handled by configuring federated credentials in Azure AD
          # and the action using the standard GITHUB_TOKEN or specific Azure login actions if needed,
          # or the SWA action inherently supporting OIDC when linked correctly in Azure.
          # The manual OIDC token fetching steps you added are usually not required for this specific action.
          # Let's remove them for now to simplify and stick to what the SWA deploy action expects.
          ###### End of Repository/Build Configurations ######

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    permissions: # Permissions for OIDC if this job also interacts with Azure via OIDC
      id-token: write # Usually not needed for 'close' action unless it authenticates for other reasons
      contents: read
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          # If OIDC is used, azure_static_web_apps_api_token might not be needed here either
          # but the 'close' action primarily needs to identify the SWA environment.
          # It's safer to leave the token if the SWA was originally set up with it.
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_GREEN_BUSH_0B1688A00 }}
          action: "close"
